# rootLogger
log4j.rootLogger=INFO, R, E, dailyFile, HTML, CONSOLE

# CONSOLE 控制台
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.ms} %p [%t] %c.%M(%F) - %m%n

# R 正常信息
log4j.appender.R=org.apache.log4j.RollingFileAppender
log4j.appender.R.maxFileSize=50MB
log4j.appender.R.maxBackupIndex=10
log4j.appender.R.file=${catalina.base}/logs/catalina.out
log4j.appender.R.threshold=ALL
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.ms} %p [%t] %c.%M(%F) - %m%n

# E 错误信息单独保存
log4j.appender.E=org.apache.log4j.RollingFileAppender
log4j.appender.E.maxFileSize=50MB
log4j.appender.E.maxBackupIndex=10
log4j.appender.E.file=${catalina.base}/logs/catalina_error.out
log4j.appender.E.threshold=ERROR
log4j.appender.E.layout=org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.ms} %p [%t] %c.%M(%F) - %m%n

# dailyFile 定期回滚日志文件
#log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.dailyFile.Threshold=info
#log4j.appender.dailyFile.ImmediateFlush=true
#log4j.appender.dailyFile.Append=true
#log4j.appender.dailyFile.File=${catalina.base}/logs/catalina.out
#log4j.appender.dailyFile.DatePattern='.'yyyy-MM-dd-HH-mm
#log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout
#log4j.appender.dailyFile.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.ms} %p [%t] %c.%M(%F) - %m%n

# HTML
#log4j.appender.HTML=org.apache.log4j.RollingFileAppender
#log4j.appender.HTML.maxFileSize=50MB
#log4j.appender.HTML.maxBackupIndex=10
#log4j.appender.HTML.file=${catalina.base}/logs/catalina.html
#log4j.appender.HTML.layout=org.apache.log4j.HTMLLayout
#log4j.appender.HTML.layout.Title=HTML Layout Example
#log4j.appender.HTML.layout.LocationInfo=true



#备注：
#说明：
#	log4j.appender.appenderName.layout=className
#		appenderName：自定义appderName，在log4j.rootLogger设置中使用
#		className：可设值如下：
#			(1)org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#			(2)org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#			(3)org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#			(4)org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#		(1)HTMLLayout选项：
#			LocationInfo=true：输出java文件名称和行号，默认值是false。
#			Title=My Logging： 默认值是Log4J Log Messages。
#		(2)PatternLayout选项：
#			ConversionPattern=%m%n：设定以怎样的格式显示消息。
#	Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
#	ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
#	Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
#	File=${catalina.base}/logs/catalina.out：指定消息输出到catalina.out文件中。
#	MaxFileSize=100KB：后缀可以是KB, MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。
#	MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文件。
#	%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
#	%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss.ms}。
#	%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
#	%t：输出产生该日志事件的线程名。
#	%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
#	%c：输出日志信息所属的类目，通常就是所在类的全名。
#	%M：输出产生日志信息的方法名。
#	%F：输出日志消息产生时所在的文件名称。
#	%L：输出代码中的行号。
#	%m：输出代码中指定的具体日志信息。
#	%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"。
#	%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
#	%%：输出一个"%"字符。
#	另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：
#		1)c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。
#		2)%-20c："-"号表示左对齐。
#		3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。
#	'.'yyyy-MM：每月
#	'.'yyyy-ww：每周
#	'.'yyyy-MM-dd：每天
#	'.'yyyy-MM-dd-a：每天两次
#	'.'yyyy-MM-dd-HH：每小时
#	'.'yyyy-MM-dd-HH-mm：每分钟
